// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static boolean currColor;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let currColor = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192) {
            let screen[i] = 0;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let currColor = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, pos, power2, i;
        let address = (32 * y) + (x / 16);
        let pos = x - (x / 16 * 16);
        let power2 = 1;
        let i = 0;
        while (i < pos) {
            let power2 = power2 * 2;
            let i = i + 1;
        }
        if (currColor) {
            let screen[address] = screen[address] | power2;
        } else {
            let screen[address] = screen[address] & ~power2;
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dy;
        var int tmp;
        if (x1 > x2) {
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }
        if (y1 < y2) {
            let dy = 1;
        } else {
            let dy = -1;
        }
        let a = 0;
        let b = 0;
        while(~((x1 + a = x2) & (y1 + b = y2))) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (x1 + a = x2) {
                let b = b + dy;
            } else {
                if (y1 + b = y2) {
                    let a = a + 1;
                } else {
                    // (y2-y1)/(x2-x1)
                    // (y2-y1-b)/(x2-x1-a)
                    // (y2-y1-b)/(x2-x1-a-1)
                    // (y2-y1-b-1)/(x2-x1-a)
                    let tmp = ((y2 - y1) * (x2 - x1 - a)) - ((y2 - y1 - b) * (x2 - x1));
                    if (y1 < y2) {
                        if (tmp < 0) {
                            let b = b + dy;
                        } else {
                            let a = a + 1;
                        }
                    } else {
                        if (tmp < 0) {
                            let a = a + 1;
                        } else {
                            let b = b + dy;
                        }
                    }
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (~(x1 > x2)) {
            do Screen.drawLine(x1, y1, x1, y2);
            let x1 = x1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy;
        let dy = -r;
        while (~(dy > r)) {
            let dx = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine(x - dx, y + dy, x + dx, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
