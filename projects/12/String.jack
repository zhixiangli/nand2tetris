// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array chars;
    field int maxSize;
    field int size;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let maxLength = Math.max(1, maxLength);
        let chars = Array.new(maxLength);
        let maxSize = maxLength;
        let size = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do chars.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return size;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let chars[size] = c;
        let size = size + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let size = size - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int result, i;
        var boolean neg;
        if (chars[0] = 45) {
            let neg = true;
            let i = 1;
        } else {
            let neg = false;
            let i = 0;
        }
        let result = 0;
        while (i < size) {
            let result = result * 10 + chars[i] - 48;
            let i = i + 1;
        }
        if (neg) {
            return -result;
        }
        return result;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let size = 0;
        if (val < 0) {
            do appendChar(45);
        }
        do setIntPositiveOnly(Math.abs(val));
        return;
    }

    method void setIntPositiveOnly(int val) {
        var int mod;
        let mod = val - (val / 10 * 10);
        if (~(val < 10)) {
            do setIntPositiveOnly(val / 10);
        }
        do appendChar(mod + 48);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
